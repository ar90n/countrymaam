// Code generated by command: go run dot_uint8_avx2.go -out dot_uint8_avx2.s -stubs dot_uint8_stub_avx2.go. DO NOT EDIT.

#include "textflag.h"

// func DotUint8AVX2(x []uint8, y []uint8) float32
// Requires: AVX, AVX2, SSE, SSE2
TEXT Â·DotUint8AVX2(SB), NOSPLIT, $0-52
	MOVQ   x_base+0(FP), AX
	MOVQ   y_base+24(FP), CX
	MOVQ   x_len+8(FP), DX
	VXORPS Y0, Y0, Y0

blockloop:
	CMPQ         DX, $0x00000020
	JL           tail
	VMOVDQU      (AX), Y1
	VMOVDQU      (CX), Y2
	VPBROADCASTW one<>+0(SB), Y3
	VPMADDUBSW   Y2, Y1, Y1
	VPMADDWD     Y1, Y3, Y1
	VCVTDQ2PS    Y1, Y1
	VPADDUSB     Y1, Y0, Y0
	ADDQ         $0x00000020, AX
	ADDQ         $0x00000020, CX
	SUBQ         $0x00000020, DX
	JMP          blockloop

tail:
	VXORPS X1, X1, X1
	XORQ   BX, BX
	XORQ   SI, SI

tailloop:
	CMPQ      DX, $0x00000000
	JE        reduce
	MOVB      (AX), BL
	MOVB      (CX), SI
	IMULQ     SI, BX
	MOVQ      BX, X2
	VCVTDQ2PS X2, X2
	ADDPS     X2, X1
	ADDQ      $0x00000001, AX
	ADDQ      $0x00000001, CX
	MOVD      $0x00000000, BX
	DECQ      DX
	JMP       tailloop

reduce:
	VEXTRACTF128 $0x01, Y0, X2
	VADDPS       X0, X2, X0
	VADDPS       X0, X1, X0
	VHADDPS      X0, X0, X0
	VHADDPS      X0, X0, X0
	MOVSS        X0, ret+48(FP)
	RET

DATA one<>+0(SB)/2, $0x0001
GLOBL one<>(SB), RODATA|NOPTR, $2
